{
  "swagger" : "2.0",
  "info" : {
    "description" : "Make and explore beautiful, rapidly-refreshed weather maps with the Cloudburst API",
    "version" : "1.2.0",
    "title" : "WXTiles"
  },
  "host" : "api.wxtiles.com",
  "basePath" : "/v0",
  "tags" : [ {
    "name" : "Tiles",
    "description" : "WXTiles API"
  } ],
  "schemes" : [ "https" ],
  "produces" : [ "application/json", "application/x-protobuf", "image/png" ],
  "paths" : {
    "/{ownerId}/layer/" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "Information about available Cloudburst layers",
        "description" : "This endpoint returns information about all current *Cloudburst* layers that can be requested, and metadata about map layers, including bounding boxes and the unit system (metric, USCS, etc.) that is used when rendering map tiles.",
        "operationId" : "getLayers",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "tags",
          "in" : "query",
          "description" : "Filter layers by tags, separated by commas. Using multiple `tags` parameters is equivalent to an `AND` operation. For example, `tags=x,y` is `x OR y`; `tags=x&tags=y` is `x AND y`; and `tags=x,y&tags=z` is `(x OR y) AND z`",
          "required" : false,
          "type" : "string",
          "collectionFormat" : "csv",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched layers' configurations",
            "schema" : {
              "$ref" : "#/definitions/Layers"
            }
          },
          "404" : {
            "description" : "**Not Found**: the owner does not exist"
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/layer/{layerId}/" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "Information about a specific layer",
        "description" : "This endpoint provides information about a specific *Cloudburst* layer that can be requested as map tiles, and its metadata, including bounding boxes and the unit system (metric, USCS, etc.) that is used when rendering map tiles.",
        "operationId" : "getLayer",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched layers' configurations",
            "schema" : {
              "$ref" : "#/definitions/Layer"
            }
          },
          "404" : {
            "description" : "**Not Found**: the owner or layer does not exist"
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/layer/{layerId}/instance/{instanceId}/" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "Information about a particular (potentially non-persistant) instance of a layer",
        "description" : "This endpoint provides information about an instance of a specific *Cloudburst* layer that can be requested as map tiles. Instances are typically added and removed as the data underlying a dataset changes with time (e.g. forecasts expire, and forecast horizons continuously move forward). Therefore a particular instance of a layer may not be persistant.",
        "operationId" : "getInstance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched layers' configurations",
            "schema" : {
              "$ref" : "#/definitions/Instance"
            }
          },
          "404" : {
            "description" : "**Not Found**: the owner, layer or instance does not exist"
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/layer/{layerId}/instance/{instanceId}/levels/" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "A collection of vertical levels for which data exists and can be requested (as tiles) for an instance of a layer.",
        "description" : "This endpoint exposes the array of vertical positions that data exists for a particular instance. Each element can be used to substitute the {level} part of a tile URL. Not all layer instances have a vertical (e.g. it may be surface wave height and therefore only apply at sea level). If a layer has no vertical dimension, the array will be empty.",
        "operationId" : "getLevels",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched layers' configurations",
            "schema" : {
              "$ref" : "#/definitions/Levels"
            }
          },
          "204" : {
            "description" : "**No Content**: the request was successful, but the layer instance has no vertical dimension so there is nothing to return."
          },
          "404" : {
            "description" : "**Not Found**: the owner, layer or instance does not exist"
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/layer/{layerId}/instance/{instanceId}/times/" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "A collection of moments in time for which data exists and can be requested (as tiles) for an instance of a layer.",
        "description" : "This endpoint exposes the array of moments that data exists for a particular instance. Each element can be used to substitute the <time> part of a tile URL. Not all layer instances have a temporal dimension (e.g. it may be static bathymetry, or an observational dataset with no forecast or hindcast). If a layer has no temporal dimension, the array will be empty. The times in the array may not be unique (this is almost always due to grouped datasets containing overlapping time steps).",
        "operationId" : "getTimes",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        } ],
        "responses" : {
          "200" : {
            "description" : "Matched layers' configurations",
            "schema" : {
              "$ref" : "#/definitions/Times"
            }
          },
          "204" : {
            "description" : "**No Content**: the request was successful, but the layer instance has no temporal dimension so there is nothing to return."
          },
          "404" : {
            "description" : "**Not Found**: the owner, layer or instance does not exist"
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "times"
    },
    "/{ownerId}/legend/{layerId}/{instanceId}/{size}/{orientation}.json" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "A JSON representation of the legend for PNG map tiles",
        "description" : "Legends are inferred from plot configurations for each layer. When a legend is disabled on a per-layer basis (or if a legend cannot be rendered due to the plot type), then this endpoint will return a 204 No Content response. Cloudburst internally uses this JSON representation to render the PNG version of the legend, and this endpoint is exposed to support client-side legend rendering and the interaction that implies. The size must be substituted by either `small` or `large`. The orientation must be substituted by either `horizontal` or `vertical`.",
        "operationId" : "getJSONLegend",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "size",
          "in" : "path",
          "description" : "The size.",
          "required" : true,
          "type" : "string",
          "enum" : [ "small", "large" ],
          "x-example" : "small"
        }, {
          "name" : "orientation",
          "in" : "path",
          "description" : "The orientation.",
          "required" : true,
          "type" : "string",
          "enum" : [ "horizontal", "vertical" ],
          "x-example" : "horizontal"
        } ],
        "responses" : {
          "200" : {
            "description" : "JSON representation of the legend (Cloudburst uses thus to render the PNG legend server-side)",
            "schema" : {
              "$ref" : "#/definitions/Legend"
            }
          },
          "204" : {
            "description" : "**No Content**: The layer/instance being requested does not have a legend."
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/legend/{layerId}/{instanceId}/{size}/{orientation}.png" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "A legend for PNG map tiles",
        "description" : "Legends are inferred from plot configurations for each layer. When a legend is disabled on a per-layer basis (or if a legend cannot be rendered due to the plot type), then this endpoint will return a 204 No Content response. The size must be substituted by either `small` or `large`. The orientation must be substituted by either `horizontal` or `vertical`.",
        "operationId" : "getPNGLegend",
        "produces" : [ "image/png" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "size",
          "in" : "path",
          "description" : "The size.",
          "required" : true,
          "type" : "string",
          "enum" : [ "small", "large" ],
          "x-example" : "small"
        }, {
          "name" : "orientation",
          "in" : "path",
          "description" : "The orientation.",
          "required" : true,
          "type" : "string",
          "enum" : [ "horizontal", "vertical" ],
          "x-example" : "horizontal"
        } ],
        "responses" : {
          "200" : {
            "description" : "A rendered map legend as a PNG"
          },
          "204" : {
            "description" : "**No Content**: The layer/instance being requested does not have a legend."
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "mock"
    },
    "/{ownerId}/tile/{layerId}/{instanceId}/{time}/{level}/{z}/{x}/{y2}.{extension}" : {
      "get" : {
        "tags" : [ "Tiles" ],
        "summary" : "A tiled map image, for use by map clients capable of consuming PNG map images in OGC TMS coordinate notation.",
        "description" : "Cloudburst produces map tiles, and PNG map tiles are the traditional format for representing these. Other possibilities include protocol-buffer vector tiles in the Mapbox vector tile specification, and others. This endpoint will most often be used by map clients (such as Leaflet, Mapbox GL JS, OpenLayers, and Google Maps), which know exactly which tiles to request for a given geographical map view and zoom level. **The Cloudburst Javascript API is responsible for completing the resource URI via these client libraries, based on what a user is authenticated to request, and what these layers support, via requests to other endpoints. Manual requests are possible but are not recommended.** The resources for a particular layer can be discovered through a `GET` request to `/layer/<layerId>/` and inspecting the response's `resources` property. The `/layer/<layerId>/<instanceID>/times/` endpoints can be used to request the times that are valid (many layer instances have only one time and/or vertical level).",
        "operationId" : "getTile",
        "produces" : [ "image/png" ],
        "parameters" : [ {
          "name" : "ownerId",
          "in" : "path",
          "description" : "The owner of the dataset.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "layerId",
          "in" : "path",
          "description" : "The id of the layer.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "instanceId",
          "in" : "path",
          "description" : "The id of the instance.",
          "required" : true,
          "type" : "string",
          "x-example" : "wxtiles"
        }, {
          "name" : "time",
          "in" : "path",
          "description" : "The time.",
          "required" : true,
          "type" : "string",
          "format" : "date-time",
          "x-example" : "wxtiles"
        }, {
          "name" : "level",
          "in" : "path",
          "description" : "The level.",
          "required" : true,
          "type" : "string",
          "x-example" : "0"
        }, {
          "name" : "z",
          "in" : "path",
          "description" : "The z.",
          "required" : true,
          "type" : "integer",
          "x-example" : 8
        }, {
          "name" : "x",
          "in" : "path",
          "description" : "The x.",
          "required" : true,
          "type" : "integer",
          "x-example" : 1
        }, {
          "name" : "y2",
          "in" : "path",
          "description" : "The y.",
          "required" : true,
          "type" : "integer",
          "x-example" : 1
        }, {
          "name" : "extension",
          "in" : "path",
          "description" : "The extension.",
          "required" : true,
          "type" : "string",
          "enum" : [ "png", "mvt" ],
          "x-example" : "png"
        } ],
        "responses" : {
          "200" : {
            "description" : "A rendered map tile as a PNG",
            "schema" : {
              "type" : "file"
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "x-swagger-router-controller" : "tile"
    }
  },
  "securityDefinitions" : {
    "apiKeyQuery" : {
      "type" : "apiKey",
      "name" : "apikey",
      "in" : "query"
    },
    "apiKeyHeader" : {
      "type" : "apiKey",
      "name" : "apikey",
      "in" : "header"
    }
  },
  "definitions" : {
    "Layers" : {
      "type" : "array",
      "description" : "All layers meeting your query, that that you are authenticated for, and which are currently available",
      "items" : {
        "$ref" : "#/definitions/Layer"
      }
    },
    "Layer" : {
      "type" : "object",
      "required" : [ "maxNativeZoom", "minNativeZoom" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Layer ID"
        },
        "instances" : {
          "type" : "array",
          "description" : "A list of the instances of this layer.",
          "items" : {
            "$ref" : "#/definitions/Instance"
          }
        },
        "bounds" : {
          "$ref" : "#/definitions/Bounds"
        },
        "instanceType" : {
          "type" : "string",
          "description" : "One of a typology of instance types. Currently these are \"cyclic\" (for model cycles), and \"observational\" (for observational timestamps)."
        },
        "instanceDescription" : {
          "type" : "string",
          "description" : "Free-form text explaining the role of instances for the associated layer"
        },
        "minNativeZoom" : {
          "$ref" : "#/definitions/MinNativeZoom"
        },
        "maxNativeZoom" : {
          "$ref" : "#/definitions/MaxNativeZoom"
        },
        "meta" : {
          "$ref" : "#/definitions/Metadata"
        },
        "resources" : {
          "$ref" : "#/definitions/Resources"
        }
      },
      "description" : "A layer representing a spatial dataset that can be rendered by Cloudburst"
    },
    "Instance" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Instance ID"
        },
        "displayName" : {
          "type" : "string",
          "description" : "Instance name, intended for display to end users"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601 datetime string representing when the instance configuration was created"
        },
        "start_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601 datetime string representing the earliest retrievable time-step for an instance"
        },
        "end_time" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "ISO 8601 datetime string representing the latest retrievable time-step for an instance"
        }
      },
      "description" : "A named instance of a dataset, typically used to represent a forecast model cycle"
    },
    "Bounds" : {
      "type" : "object",
      "properties" : {
        "west" : {
          "type" : "number",
          "format" : "float",
          "description" : "The western extent of the instance's dataset (degrees longitude)"
        },
        "east" : {
          "type" : "number",
          "format" : "float",
          "description" : "The eastern extent of the instance's dataset (degrees longitude)"
        },
        "north" : {
          "type" : "number",
          "format" : "float",
          "description" : "The northern extent of the instance's dataset (degrees latitude)"
        },
        "south" : {
          "type" : "number",
          "format" : "float",
          "description" : "The southern extent of the instance's dataset (degrees longitude)"
        }
      },
      "description" : "An object representing the layer instance's bounding box (derived from the dataset)"
    },
    "MinNativeZoom" : {
      "type" : "number",
      "format" : "integer",
      "description" : "The smallest scale supported natively by the layer."
    },
    "MaxNativeZoom" : {
      "type" : "number",
      "format" : "integer",
      "description" : "The largest scale supported natively by the layer."
    },
    "Resources" : {
      "type" : "object",
      "properties" : {
        "tile" : {
          "type" : "string",
          "description" : "Template URL for requesting styled, PNG image tiles. Elements of the path enclosed in angle brackets need to be appropriately substituted when making requests."
        },
        "vtile" : {
          "type" : "string",
          "description" : "Template URL for requesting vector tiles in the Mapbox vector tile (MVT) specification, as protocol buffers. Elements of the path enclosed in angle brackets need to be appropriately substituted when making requests."
        },
        "gtile" : {
          "type" : "string",
          "description" : "Template URL for requesting UTFGrid tiles in the Mapbox UTFGrid specification, as JSON (a format for rasterised interaction data). Elements of the path enclosed in angle brackets need to be appropriately substituted when making requests."
        },
        "rtile" : {
          "type" : "string",
          "description" : "Template URL for requesting raw data tiles. Elements of the path enclosed in angle brackets need to be appropriately substituted when making requests."
        },
        "legend" : {
          "type" : "string",
          "description" : "URL for requesting legends as PNG images that correspond to the PNG image tiles. The \"size\" and \"orientation\" elements in the path (enclosed in angle brackets) need to be substituted. Valid values for size are \"small\" and \"large\". Valid values for orientation are \"horizontal\" and \"vertical\"."
        },
        "jsonlegend" : {
          "type" : "string",
          "description" : "URL for requesting legends as JSON representations. These JSON representations are used internally to construct the image versions of the legend, and can be used to render custom legends client-side. The \"size\" and \"orientation\" elements in the path (enclosed in angle brackets) need to be substituted."
        }
      },
      "description" : "Template URLs for requesting tiles and other resources for this layer instance. Note that the tile coordinates (z, x, and y) must be given in OGC TMS, rather than the XYZ specification (see https://gist.github.com/tmcw/4954720 for the difference, which only affects the y coordinate). Not all given properties exist for all layers. The literal text \"instance\" (enclosed in angle brackets) must be substituted by a valid instance ID."
    },
    "Legend" : {
      "type" : "object",
      "properties" : {
        "plotID" : {
          "$ref" : "#/definitions/LegendPlot"
        }
      },
      "description" : "Legend configuration for the given `plotID` (a unique identifier for a plot), derived from the respective plot configuration. A plot can consist of multiple sub-plots (e.g. a map of precipitation with a pressure overlay), only one of which will have a value associated with its key."
    },
    "LegendPlot" : {
      "type" : "object",
      "properties" : {
        "plotType" : {
          "$ref" : "#/definitions/LegendItem"
        }
      },
      "description" : "A Matplotlib plot type (e.g. 'pcolormesh', 'contourf') as key, with the value representing the information for the legend for that particular sub-plot."
    },
    "LegendItem" : {
      "type" : "object",
      "properties" : {
        "cmap" : {
          "type" : "string",
          "description" : "The named colourmap used by the plot. Possibly represents one of the default Matplotlib colourmaps, a cmocean Matplotlib colourmap, or a user-defined colourmap."
        },
        "cmap_discrete" : {
          "type" : "array",
          "description" : "A sorted array of discrete values in the colourmap. If the plot uses levels (e.g. contours), then the array will include the actual class colour. Otherwise, if the plot uses a continuous colour ramp (e.g. a pcolormesh), the array includes ten values sampled evenly between the low and the high value.",
          "items" : {
            "type" : "string",
            "description" : "Hex value of colour"
          }
        },
        "colors" : {
          "type" : "array",
          "description" : "A sorted array of values referencing named colours for the lines in the plot (contour-style plots only). If the value is a string (rather than an array), that value applies to all lines.",
          "items" : {
            "type" : "string",
            "description" : "Named colour (HTML convention) or hex value."
          }
        },
        "extend" : {
          "type" : "string",
          "description" : "Indicates whether the upper- or lower-boundary of the colourmap should be extended. Unless this is 'neither' or null, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range.",
          "enum" : [ "neither", "both", "min", "max", "null" ]
        },
        "hatches" : {
          "type" : "array",
          "description" : "Sorted array of hatch styles for the plot's levels",
          "items" : {
            "type" : "string",
            "description" : "The hatch style for the sub-plot",
            "enum" : [ "/", "//", "///", "\\", "\\\\", "\\\\\\", "|", "||", "|||", "-", "--", "---", "+", "++", "+++", "x", "xx", "xxx", "o", "oo", "ooo", "O", "OO", "OOO", ".", "..", "...", "*", "**", "***" ]
          }
        },
        "levels" : {
          "type" : "array",
          "description" : "A sorted array of values in the dataset where breaks are to be drawn (e.g. contour lines)",
          "items" : {
            "type" : "number",
            "format" : "float"
          }
        },
        "ticks" : {
          "type" : "array",
          "description" : "A sorted array of values where \"ticks\" (small leader lines) are to be drawn on the legend. With this property, some levels can be left without a tick, or ticks added between class breaks.",
          "items" : {
            "type" : "number",
            "format" : "real"
          }
        },
        "tick_labels" : {
          "type" : "array",
          "description" : "A sorted array of values for the legend's ticks. With this property, ticks can be given non-default labels (such as human interpretations of critical numerical values).",
          "items" : {
            "type" : "string"
          }
        },
        "linestyles" : {
          "type" : "array",
          "description" : "A sorted array of linestyles for the plot levels",
          "items" : {
            "type" : "string",
            "description" : "The linestyle for the sub-plot",
            "enum" : [ "solid", "dashed", "dashdot", "dotted", "-", "--", "-.", ":", " ", "", "null" ]
          }
        },
        "linewidths" : {
          "type" : "array",
          "description" : "A sorted array of linewidths for the plot levels",
          "items" : {
            "type" : "number",
            "format" : "float"
          }
        },
        "norm" : {
          "$ref" : "#/definitions/Norm"
        },
        "unit" : {
          "type" : "string",
          "description" : "Text that is used to indicate the units on the scale; may include additional text beyond a representation of a unit (e.g. \"Low-level azimuthal shear (0.001/s)\")"
        },
        "vmax" : {
          "type" : "number",
          "format" : "float",
          "description" : "If present, indicates the upper colour boundary of a continuous plot (such as a pcolormesh)."
        },
        "vmin" : {
          "type" : "number",
          "format" : "float",
          "description" : "If present, indicates the lower colour boundary of a continuous plot (such as a pcolormesh)."
        },
        "mplkwargs" : {
          "$ref" : "#/definitions/MplKwargs"
        }
      }
    },
    "MplKwargs" : {
      "type" : "object",
      "properties" : {
        "extend" : {
          "type" : "string",
          "description" : "See \"extend\" for the LegendItem; indicates if the extend method of the legend has been set independently to the plot.",
          "enum" : [ "neither", "both", "min", "max", "null" ]
        },
        "spacing" : {
          "type" : "string",
          "description" : "Indicates whether class breaks are separated uniformly, or in proportion to their actual value between the highest and the lowest breaks.",
          "enum" : [ "proportional", "uniform", "null" ]
        },
        "alpha" : {
          "type" : "number",
          "format" : "float",
          "description" : "Transparency of the legend, from 0 (opaque) to 1 (transparent). Absence of this property implies full opacity."
        },
        "format" : {
          "type" : "string",
          "description" : "Python string formatter (e.g. \"%.3f\") indicating how values in the levels should be translated into ticks. This can be used to round values for display on a legend."
        },
        "drawedges" : {
          "type" : "boolean",
          "description" : "Whether edges should be drawn at colour boundaries within the legend."
        }
      },
      "description" : "Additional, arbitrary Matplotlib keyword arguments. All are optional. Additional properties are possible."
    },
    "Norm" : {
      "type" : "object",
      "properties" : {
        "method" : {
          "type" : "string",
          "description" : "Normalisation technique, corresponding to one of the Matplotlib colorbar normalisation methods.",
          "enum" : [ "LogNorm", "SymLogNorm", "PowerNorm", "BoundaryNorm", "OffsetNorm" ]
        },
        "vmin" : {
          "type" : "number",
          "format" : "integer"
        },
        "vmax" : {
          "type" : "number",
          "format" : "integer"
        },
        "clip" : {
          "type" : "boolean"
        },
        "gamma" : {
          "type" : "number",
          "format" : "float"
        },
        "linthresh" : {
          "type" : "number",
          "format" : "float"
        },
        "linscale" : {
          "type" : "number",
          "format" : "float"
        }
      },
      "description" : "Normalisation technique and parameters for mapping values to colours. Corresponds to valid Matplotlib colorbar normalisation methods. If not null, the only required property is \"method\", with the rest depending on the normalisation technique."
    },
    "Levels" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Level"
      }
    },
    "Level" : {
      "type" : "string",
      "description" : "A potential value of a vertical dimension of an instance. Values in this array is used to substitute {level} in a tile URL."
    },
    "Times" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Time"
      }
    },
    "Time" : {
      "type" : "string",
      "description" : "ISO 8601 string representing a datetime, a possible value of the temporal dimension of an instance. Values in this array is used to ubstitute \"time\" in a tile URL."
    },
    "Metadata" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "A short, human-readable description of a layer that is suitable for inclusion in a list of available layers."
        },
        "description" : {
          "type" : "string",
          "description" : "A long description of a layer, possibly including HTML tags to navigate users to glossaries or other sources of additional information."
        },
        "organisation" : {
          "type" : "string",
          "description" : "Organisation responsible for publishing the data used in the layer."
        },
        "source" : {
          "type" : "string",
          "description" : "The source of the data (such as a model)."
        },
        "regions" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "description" : "A three-digit numerical code used by the Statistics Division of the United Nations Secretariat. Represents geographical regions where the layer is considered applicable, from the global scale ('001'), to continental, sub-continental, and country scales. See http://unstats.un.org/unsd/methods/m49/m49.htm for the list of values in current use."
          }
        },
        "unit_system" : {
          "type" : "string",
          "description" : "The system of units that the layer renders quantitative values in. Examples include \"metric\" and \"uscs\", for layers that render with metric and United States customary system (USCS) units, respectively. A null value indicates that the unit system is unspecified or does not fit into a category (e.g. knots). This does not indicate exactly which units a plot will render, only a broad classification. This can be used to filter duplicate layers that only differ in whether they render the same physical phenomenon as, for example, millimetres or inches. There is no restriction on what value this string may take."
        }
      },
      "description" : "Metadata for a layer. Cloudburst supports an arbitrary metadata document, but these specified keys are useful and will tend to exist, but none of them is mandatory, and a property may exist but have a null value."
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "http-code" : {
          "type" : "number",
          "format" : "integer",
          "description" : "HTTP status code"
        },
        "incident-number" : {
          "type" : "string",
          "description" : "Incident number that has been recorded."
        },
        "message" : {
          "type" : "string",
          "description" : "Explanation why the request has caused an error"
        }
      }
    }
  },
  "parameters" : {
    "ownerId" : {
      "name" : "ownerId",
      "in" : "path",
      "description" : "The owner of the dataset.",
      "required" : true,
      "type" : "string",
      "x-example" : "wxtiles"
    },
    "layerId" : {
      "name" : "layerId",
      "in" : "path",
      "description" : "The id of the layer.",
      "required" : true,
      "type" : "string",
      "x-example" : "wxtiles"
    },
    "instanceId" : {
      "name" : "instanceId",
      "in" : "path",
      "description" : "The id of the instance.",
      "required" : true,
      "type" : "string",
      "x-example" : "wxtiles"
    },
    "time" : {
      "name" : "time",
      "in" : "path",
      "description" : "The time.",
      "required" : true,
      "type" : "string",
      "format" : "date-time",
      "x-example" : "wxtiles"
    },
    "level" : {
      "name" : "level",
      "in" : "path",
      "description" : "The level.",
      "required" : true,
      "type" : "string",
      "x-example" : "0"
    },
    "z" : {
      "name" : "z",
      "in" : "path",
      "description" : "The z.",
      "required" : true,
      "type" : "integer",
      "x-example" : 8
    },
    "x" : {
      "name" : "x",
      "in" : "path",
      "description" : "The x.",
      "required" : true,
      "type" : "integer",
      "x-example" : 1
    },
    "y2" : {
      "name" : "y2",
      "in" : "path",
      "description" : "The y.",
      "required" : true,
      "type" : "integer",
      "x-example" : 1
    },
    "extension" : {
      "name" : "extension",
      "in" : "path",
      "description" : "The extension.",
      "required" : true,
      "type" : "string",
      "enum" : [ "png", "mvt" ],
      "x-example" : "png"
    },
    "orientation" : {
      "name" : "orientation",
      "in" : "path",
      "description" : "The orientation.",
      "required" : true,
      "type" : "string",
      "enum" : [ "horizontal", "vertical" ],
      "x-example" : "horizontal"
    },
    "size" : {
      "name" : "size",
      "in" : "path",
      "description" : "The size.",
      "required" : true,
      "type" : "string",
      "enum" : [ "small", "large" ],
      "x-example" : "small"
    }
  },
  "securityRequirement" : [ {
    "apiKeyHeader" : [ ]
  }, {
    "apiKeyQuery" : [ ]
  } ]
}